document.addEventListener('DOMContentLoaded', () => {

    // --- SELETORES DE ELEMENTOS ---
    const slides = document.querySelectorAll('.slide');
    const btnAnterior = document.getElementById('btn-anterior');
    const btnProximo = document.getElementById('btn-proximo');
    const navLinks = document.querySelectorAll('.nav-link');
    const cardContainers = document.querySelectorAll('.card-container');
    const exploreButtons = document.querySelectorAll('.btn-card');
    let slideAtual = 0;
    let isAnimating = false; // Flag para evitar spam de cliques durante a animação

    // --- FUNÇÕES DE NAVEGAÇÃO DE SLIDE ---

    /**
     * Mostra um slide específico e lida com as animações de entrada e saída.
     * @param {number} proximoIndice O índice do slide a ser mostrado.
     */
    function mostrarSlide(proximoIndice) {
        if (isAnimating || proximoIndice < 0 || proximoIndice >= slides.length) {
            return;
        }

        isAnimating = true;
        const slideAntigo = slides[slideAtual];
        const slideNovo = slides[proximoIndice];

        // Animação de saída para o slide antigo
        slideAntigo.classList.add('slide-saindo');

        // Prepara e mostra o novo slide
        slideNovo.classList.remove('slide-saindo');
        slideNovo.classList.add('slide-ativo');

        // Atualiza a navegação
        slideAtual = proximoIndice;
        atualizarControles();

        // Após a animação de saída, limpa as classes
        setTimeout(() => {
            slideAntigo.classList.remove('slide-ativo', 'slide-saindo');
            isAnimating = false;
        }, 700); // Deve corresponder à duração da transição no CSS
    }

    /** Atualiza a UI dos controles de navegação */
    function atualizarControles() {
        // Mostra/esconde botões de navegação
        btnAnterior.style.visibility = slideAtual === 0 ? 'hidden' : 'visible';
        btnProximo.style.visibility = slideAtual === slides.length - 1 ? 'hidden' : 'visible';

        // Atualiza o link/ponto ativo no menu de navegação
        navLinks.forEach(link => {
            link.classList.remove('active-link');
            if (parseInt(link.dataset.slideTo, 10) === slideAtual) {
                link.classList.add('active-link');
            }
        });
    }

    // --- CONFIGURAÇÃO DOS EVENT LISTENERS ---

    btnProximo.addEventListener('click', () => mostrarSlide(slideAtual + 1));
    btnAnterior.addEventListener('click', () => mostrarSlide(slideAtual - 1));

    // =======================================================
    // AQUI ESTÁ A LÓGICA PARA AS SETAS DO TECLADO
    // =======================================================
    document.addEventListener('keydown', (event) => {
        if (event.key === 'ArrowRight') {
            mostrarSlide(slideAtual + 1);
        } else if (event.key === 'ArrowLeft') {
            mostrarSlide(slideAtual - 1);
        }
    });
    // =======================================================

    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const slideIndex = parseInt(link.dataset.slideTo, 10);
            mostrarSlide(slideIndex);
        });
    });

    exploreButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.stopPropagation();
            const slideIndex = parseInt(button.dataset.slideTo, 10);
            mostrarSlide(slideIndex);
        });
    });

    cardContainers.forEach(container => {
        container.addEventListener('click', () => {
            container.classList.toggle('virado');
        });
    });

    // --- ANIMAÇÃO DO CANVAS DE PARTÍCULAS ---

    const canvas = document.getElementById('particle-canvas');
    const ctx = canvas.getContext('2d');
    let particles = [];

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }

    // Classe para representar uma partícula
    class Particle {
        constructor(x, y, directionX, directionY, size, color) {
            this.x = x;
            this.y = y;
            this.directionX = directionX;
            this.directionY = directionY;
            this.size = size;
            this.color = color;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
            ctx.fillStyle = this.color;
            ctx.fill();
        }

        update() {
            if (this.x > canvas.width || this.x < 0) this.directionX = -this.directionX;
            if (this.y > canvas.height || this.y < 0) this.directionY = -this.directionY;
            this.x += this.directionX;
            this.y += this.directionY;
            this.draw();
        }
    }

    function initParticles() {
        particles = [];
        const numberOfParticles = (canvas.height * canvas.width) / 9000;
        for (let i = 0; i < numberOfParticles; i++) {
            const size = Math.random() * 2 + 0.5;
            const x = Math.random() * (innerWidth - size * 2 - size * 2) + size * 2;
            const y = Math.random() * (innerHeight - size * 2 - size * 2) + size * 2;
            const directionX = (Math.random() * 0.4) - 0.2;
            const directionY = (Math.random() * 0.4) - 0.2;
            const color = 'rgba(56, 189, 248, 0.6)';
            particles.push(new Particle(x, y, directionX, directionY, size, color));
        }
    }

    function animateParticles() {
        requestAnimationFrame(animateParticles);
        ctx.clearRect(0, 0, innerWidth, innerHeight);
        for (let i = 0; i < particles.length; i++) {
            particles[i].update();
        }
    }
    
    // --- INICIALIZAÇÃO ---
    window.addEventListener('resize', () => {
        resizeCanvas();
        initParticles();
    });

    resizeCanvas();
    initParticles();
    animateParticles();
    mostrarSlide(0); // Começa mostrando o primeiro slide

});
